{"ast":null,"code":"var _jsxFileName = \"/home/benoit/Documents/ReactJS/pendu_ocr/src/App.js\";\nimport React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle';\nimport './App.css';\nimport Key from './key';\nconst SYMBOLS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.keys = this.generateKeyBoard();\n    this.state = {\n      currentPair: [],\n      guesses: 0,\n      hallOfFame: null,\n      matchedCardIndices: []\n    };\n\n    this.displayHallOfFame = hallOfFame => {\n      this.setState({\n        hallOfFame\n      });\n    };\n\n    this.handleCardClick = index => {\n      const currentPair = this.state.currentPair;\n\n      if (currentPair.length === 2) {\n        return;\n      }\n\n      if (currentPair.length === 0) {\n        this.setState({\n          currentPair: [index]\n        });\n        return;\n      }\n\n      this.handleNewPairClosedBy(index);\n    };\n  }\n\n  generateKeyBoard() {\n    const result = [];\n    const size = 26;\n    const candidates = SYMBOLS;\n\n    while (result.length < size) {\n      const key = candidates.pop();\n      result.push(key);\n    }\n\n    return result;\n  }\n\n  getFeedbackForCard(index) {\n    const _this$state = this.state,\n          currentPair = _this$state.currentPair,\n          matchedCardIndices = _this$state.matchedCardIndices;\n    const indexMatched = matchedCardIndices.includes(index);\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched';\n    }\n\n    return indexMatched ? 'visible' : 'hidden';\n  } // Arrow fx for binding\n\n\n  handleNewPairClosedBy(index) {\n    const _this$state2 = this.state,\n          cards = _this$state2.cards,\n          currentPair = _this$state2.currentPair,\n          guesses = _this$state2.guesses,\n          matchedCardIndices = _this$state2.matchedCardIndices;\n    const newPair = [currentPair[0], index];\n    const newGuesses = guesses + 1;\n    const matched = cards[newPair[0]] === cards[newPair[1]];\n    this.setState({\n      currentPair: newPair,\n      guesses: newGuesses\n    });\n\n    if (matched) {\n      this.setState({\n        matchedCardIndices: [...matchedCardIndices, ...newPair]\n      });\n    }\n\n    setTimeout(() => this.setState({\n      currentPair: []\n    }), VISUAL_PAUSE_MSECS);\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          cards = _this$state3.cards,\n          guesses = _this$state3.guesses,\n          hallOfFame = _this$state3.hallOfFame,\n          matchedCardIndices = _this$state3.matchedCardIndices;\n    const won = matchedCardIndices.length === 2;\n    return React.createElement(\"div\", {\n      className: \"memory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(GuessCount, {\n      guesses: guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), cards.map((card, index) => React.createElement(Card, {\n      card: card,\n      feedback: this.getFeedbackForCard(index),\n      key: index,\n      index: index,\n      onClick: this.handleCardClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), won && (hallOfFame ? React.createElement(HallOfFame, {\n      entries: hallOfFame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }) : React.createElement(HighScoreInput, {\n      guesses: guesses,\n      onStored: this.displayHallOfFame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/benoit/Documents/ReactJS/pendu_ocr/src/App.js"],"names":["React","Component","shuffle","Key","SYMBOLS","App","keys","generateKeyBoard","state","currentPair","guesses","hallOfFame","matchedCardIndices","displayHallOfFame","setState","handleCardClick","index","length","handleNewPairClosedBy","result","size","candidates","key","pop","push","getFeedbackForCard","indexMatched","includes","cards","newPair","newGuesses","matched","setTimeout","VISUAL_PAUSE_MSECS","render","won","map","card"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport Key from './key'\n\n\n\nconst SYMBOLS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\nclass App extends Component {\n\n\n  keys= this.generateKeyBoard()\n\n  state = {\n    \n    currentPair: [],\n    guesses: 0,\n    hallOfFame: null,\n    matchedCardIndices: [],\n  }\n\n  displayHallOfFame = hallOfFame => {\n      this.setState({hallOfFame})\n  }\n\n  generateKeyBoard() {\n    const result = []\n    const size = 26\n    const candidates = SYMBOLS\n    while (result.length < size) {\n      const key = candidates.pop()\n      result.push(key)\n    }\n    return result\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state\n    const indexMatched = matchedCardIndices.includes(index)\n  \n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n  \n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n  \n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n  // Arrow fx for binding\n  handleCardClick = index => {\n    const { currentPair } = this.state\n\n    if (currentPair.length === 2) {\n      return\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] })\n      return\n    }\n\n    this.handleNewPairClosedBy(index)\n  }\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\n\n    const newPair = [currentPair[0], index]\n    const newGuesses = guesses + 1\n    const matched = cards[newPair[0]] === cards[newPair[1]]\n    this.setState({ currentPair: newPair, guesses: newGuesses })\n    if (matched) {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\n    }\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\n  }\n\n  render() {\n    const {cards, guesses, hallOfFame, matchedCardIndices}=this.state\n    const won = matchedCardIndices.length === 2\n    return (\n      <div className=\"memory\">\n        <GuessCount guesses={guesses} />\n        {cards.map((card, index) => (\n          <Card card = {card} \n          feedback={this.getFeedbackForCard(index)}\n          key = {index}\n          index = {index}\n          onClick = {this.handleCardClick} />\n        ))}\n\n        {won && (\n          hallOfFame ? (<HallOfFame entries={hallOfFame}/>) : \n          (<HighScoreInput guesses={guesses} onStored = {this.displayHallOfFame}/>)\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/benoit/Documents/ReactJS/pendu_ocr/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Key from './KeyBoard';\nimport Letter from './WordToGuess';\nimport GuessCount from './GuessCount';\nimport HallOfFame from './HallOfFame';\nimport HighScoreInput from './HighScoreInput';\nconst SYMBOLS = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z';\nconst Dictionnaire = ['LAPIN', 'PROUT'];\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      keys: this.generateKeyBoard(),\n      word: this.chooseWord(),\n      guesses: 0,\n      usedKeys: [],\n      foundLetters: [],\n      hallOfFame: null\n    };\n\n    this.handleCardClick = index => {\n      this.handleNewGuess(index);\n    };\n  }\n\n  chooseWord() {\n    const result = [];\n    var Word = Dictionnaire[Math.floor(Math.random() * Dictionnaire.length)];\n\n    for (var i = 0; i < Word.length; i++) {\n      result.push(Word.charAt(i));\n    }\n\n    console.log(result);\n    return result;\n  }\n\n  generateKeyBoard() {\n    return SYMBOLS.split(' ');\n  }\n\n  getFeedbackForKeyBoard(index) {\n    const usedKeys = this.state.usedKeys;\n    const isUsed = usedKeys.includes(index);\n\n    if (isUsed) {\n      return 'hidden';\n    }\n\n    return 'visible';\n  }\n\n  getFeedbackForLetter(index) {\n    const foundLetters = this.state.foundLetters;\n    const isFound = foundLetters.includes(index);\n\n    if (isFound) {\n      return 'visible';\n    }\n\n    return 'hidden';\n  }\n\n  handleNewGuess(index) {\n    const _this$state = this.state,\n          word = _this$state.word,\n          guesses = _this$state.guesses,\n          usedKeys = _this$state.usedKeys,\n          foundLetters = _this$state.foundLetters;\n    const newUsedKey = [index];\n    console.log(word);\n    const isIn = word.includes(SYMBOLS.split(' ')[index]);\n    const newGuesses = guesses + 1;\n    this.setState({\n      usedKeys: [...usedKeys, ...newUsedKey],\n      guesses: newGuesses\n    });\n\n    if (isIn) {\n      var newLetters = [];\n\n      for (var i = 0; i < word.length; i++) {\n        if (SYMBOLS.split(' ')[index] === word[i]) {\n          newLetters.push(i);\n        }\n      }\n\n      this.setState({\n        foundLetters: [...foundLetters, ...newLetters]\n      });\n    }\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          keys = _this$state2.keys,\n          word = _this$state2.word,\n          guesses = _this$state2.guesses,\n          foundLetters = _this$state2.foundLetters;\n    const won = foundLetters.length = word.length;\n    return React.createElement(\"div\", {\n      className: \"Pendu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(GuessCount, {\n      guesses: guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"wordToGuess\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, word.map((lettre, index) => React.createElement(Letter, {\n      lettre: lettre,\n      feedback: this.getFeedbackForLetter(index),\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"KeyBoard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, keys.map((touche, index) => React.createElement(Key, {\n      touche: touche,\n      feedback: this.getFeedbackForKeyBoard(index),\n      key: touche,\n      index: index,\n      onClick: this.handleCardClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }))), won && (hallOfFame ? React.createElement(HallOfFame, {\n      entries: hallOfFame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }) : React.createElement(HighScoreInput, {\n      guesses: guesses,\n      onStored: this.displayHallOfFame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/benoit/Documents/ReactJS/pendu_ocr/src/App.js"],"names":["React","Component","Key","Letter","GuessCount","HallOfFame","HighScoreInput","SYMBOLS","Dictionnaire","App","state","keys","generateKeyBoard","word","chooseWord","guesses","usedKeys","foundLetters","hallOfFame","handleCardClick","index","handleNewGuess","result","Word","Math","floor","random","length","i","push","charAt","console","log","split","getFeedbackForKeyBoard","isUsed","includes","getFeedbackForLetter","isFound","newUsedKey","isIn","newGuesses","setState","newLetters","render","won","map","lettre","touche","displayHallOfFame"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nimport Key from './KeyBoard'\nimport Letter from './WordToGuess'\nimport GuessCount from './GuessCount'\nimport HallOfFame from './HallOfFame'\nimport HighScoreInput from './HighScoreInput'\n\nconst SYMBOLS = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'\n\nconst Dictionnaire = [\n  'LAPIN',\n  'PROUT'\n]\n\nclass App extends Component {\n\n\n  state = {\n    keys: this.generateKeyBoard(),\n    word : this.chooseWord(),\n    guesses: 0,\n    usedKeys: [],\n    foundLetters: [],\n    hallOfFame: null,\n  }\n\n  chooseWord(){\n    const result = []\n\n    var Word = Dictionnaire[Math.floor(Math.random()*Dictionnaire.length)];\n     \n    for (var i = 0; i < Word.length; i++) {\n      result.push(Word.charAt(i));\n    }\n    console.log(result)\n    return result\n\n  }\n\n  generateKeyBoard() {\n    \n    return SYMBOLS.split(' ');\n  }\n\n  getFeedbackForKeyBoard(index) {\n    const {usedKeys } = this.state\n    const isUsed = usedKeys.includes(index)\n  \n    if (isUsed) {\n      return 'hidden'\n    }\n    return 'visible'\n  }\n\n  getFeedbackForLetter(index) {\n    const {foundLetters } = this.state\n    const isFound = foundLetters.includes(index)\n  \n    if (isFound) {\n      return 'visible'\n    }\n    return 'hidden'\n  }\n\n  handleCardClick = index => {\n\n    this.handleNewGuess(index)\n  }\n\n  handleNewGuess(index) {\n    const { word, guesses, usedKeys, foundLetters } = this.state\n    const newUsedKey = [index]\n    console.log(word);\n    const isIn = word.includes(SYMBOLS.split(' ')[index])\n    const newGuesses = guesses + 1\n\n    this.setState({ usedKeys: [...usedKeys, ...newUsedKey], guesses: newGuesses })\n    if (isIn) {\n      var newLetters = [];\n      for(var i = 0; i < word.length; i++){\n        if (SYMBOLS.split(' ')[index] === word[i]){\n          newLetters.push(i);\n        }\n      }\n      this.setState({ foundLetters: [...foundLetters, ...newLetters] })\n    }\n  }\n\n\n  render() {\n    const {keys, word, guesses, foundLetters }=this.state;\n    const won = foundLetters.length = word.length;\n\n    return (\n      \n      <div className=\"Pendu\">\n        <GuessCount guesses={guesses} />\n        <div className=\"wordToGuess\">\n          {word.map((lettre, index) => (\n            <Letter lettre = {lettre}\n            feedback = {this.getFeedbackForLetter(index)}\n            key = {index} />\n          ))}\n        </div>\n        <div className=\"KeyBoard\">\n          {keys.map((touche, index) => (\n            <Key touche = {touche}\n            feedback = {this.getFeedbackForKeyBoard(index)}\n            key = {touche}\n            index = {index}\n            onClick = {this.handleCardClick}\n             />\n          ))}\n        </div>\n        {won && (\n          hallOfFame ? (<HallOfFame entries={hallOfFame}/>) : \n          (<HighScoreInput guesses={guesses} onStored = {this.displayHallOfFame}/>)\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
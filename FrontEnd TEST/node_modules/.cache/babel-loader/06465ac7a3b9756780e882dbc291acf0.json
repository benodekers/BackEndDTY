{"ast":null,"code":"var _jsxFileName = \"/home/benoit/Documents/ReactJS/pendu_ocr/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Key from './KeyBoard';\nimport Letter from './WordToGuess';\nimport GuessCount from './GuessCount';\nimport HallOfFame from './HallOfFame';\nimport HighScoreInput from './HighScoreInput';\nimport askWord from './askWord';\nconst SYMBOLS = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z';\nconst Dictionnaire = ['LIPINddddddddddddd', 'PROOOddddddddd'];\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      keys: this.generateKeyBoard(),\n      word: [],\n      guesses: 0,\n      usedKeys: [],\n      foundLetters: [],\n      hallOfFame: null\n    };\n\n    this.displayHallOfFame = hallOfFame => {\n      this.setState({\n        hallOfFame\n      });\n    };\n\n    this.handleCardClick = index => {\n      this.handleNewGuess(index);\n    };\n  }\n\n  chooseWord() {\n    const result = [];\n    var Word = Dictionnaire[Math.floor(Math.random() * Dictionnaire.length)];\n\n    for (var i = 0; i < Word.length; i++) {\n      result.push(Word.charAt(i));\n    }\n\n    return result;\n  }\n\n  generateKeyBoard() {\n    return SYMBOLS.split(' ');\n  }\n\n  getFeedbackForKeyBoard(index) {\n    const usedKeys = this.state.usedKeys;\n    const isUsed = usedKeys.includes(index);\n\n    if (isUsed) {\n      return 'hidden';\n    }\n\n    return 'visible';\n  }\n\n  getFeedbackForLetter(index) {\n    const _this$state = this.state,\n          foundLetters = _this$state.foundLetters,\n          word = _this$state.word;\n    const isFound = foundLetters.includes(word[index]);\n\n    if (isFound) {\n      return 'visible';\n    }\n\n    return 'hidden';\n  }\n\n  handleNewGuess(index) {\n    const _this$state2 = this.state,\n          word = _this$state2.word,\n          guesses = _this$state2.guesses,\n          usedKeys = _this$state2.usedKeys,\n          foundLetters = _this$state2.foundLetters;\n    const newUsedKey = [index];\n    const isIn = word.includes(SYMBOLS.split(' ')[index]) && !foundLetters.includes(SYMBOLS.split(' ')[index]);\n    const newGuesses = isIn ? guesses + 1 : guesses;\n    console.log(isIn);\n    this.setState({\n      usedKeys: [...usedKeys, ...newUsedKey],\n      guesses: newGuesses\n    });\n\n    if (isIn) {\n      var newLetters = [];\n\n      for (var i = 0; i < word.length; i++) {\n        if (SYMBOLS.split(' ')[index] === word[i]) {\n          newLetters.push(word[i]);\n        }\n      }\n\n      this.setState({\n        foundLetters: [...foundLetters, ...newLetters]\n      });\n    }\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          keys = _this$state3.keys,\n          word = _this$state3.word,\n          guesses = _this$state3.guesses,\n          foundLetters = _this$state3.foundLetters,\n          hallOfFame = _this$state3.hallOfFame;\n    const won = foundLetters.length === word.length;\n    return React.createElement(\"div\", {\n      className: \"Pendu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, word ? React.createElement(HallOfFame, {\n      entries: hallOfFame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }) : React.createElement(HighScoreInput, {\n      guesses: guesses,\n      onStored: this.displayHallOfFame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(GuessCount, {\n      guesses: guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"wordToGuess\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, word.map((lettre, index) => React.createElement(Letter, {\n      lettre: lettre,\n      feedback: this.getFeedbackForLetter(index),\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"KeyBoard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, keys.map((touche, index) => React.createElement(Key, {\n      touche: touche,\n      feedback: this.getFeedbackForKeyBoard(index),\n      key: touche,\n      index: index,\n      onClick: this.handleCardClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }))), won && (hallOfFame ? React.createElement(HallOfFame, {\n      entries: hallOfFame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }) : React.createElement(HighScoreInput, {\n      guesses: guesses,\n      onStored: this.displayHallOfFame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/benoit/Documents/ReactJS/pendu_ocr/src/App.js"],"names":["React","Component","Key","Letter","GuessCount","HallOfFame","HighScoreInput","askWord","SYMBOLS","Dictionnaire","App","state","keys","generateKeyBoard","word","guesses","usedKeys","foundLetters","hallOfFame","displayHallOfFame","setState","handleCardClick","index","handleNewGuess","chooseWord","result","Word","Math","floor","random","length","i","push","charAt","split","getFeedbackForKeyBoard","isUsed","includes","getFeedbackForLetter","isFound","newUsedKey","isIn","newGuesses","console","log","newLetters","render","won","map","lettre","touche"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nimport Key from './KeyBoard'\nimport Letter from './WordToGuess'\nimport GuessCount from './GuessCount'\nimport HallOfFame from './HallOfFame'\nimport HighScoreInput from './HighScoreInput'\nimport askWord from './askWord'\n\nconst SYMBOLS = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'\n\nconst Dictionnaire = [\n  'LIPINddddddddddddd',\n  'PROOOddddddddd'\n]\n\nclass App extends Component {\n\n\n  state = {\n    keys: this.generateKeyBoard(),\n    word : [],\n    guesses: 0,\n    usedKeys: [],\n    foundLetters: [],\n    hallOfFame: null,\n  }\n\n  chooseWord(){\n    const result = []\n\n    var Word = Dictionnaire[Math.floor(Math.random()*Dictionnaire.length)];\n     \n    for (var i = 0; i < Word.length; i++) {\n      result.push(Word.charAt(i));\n    }\n    return result\n\n  }\n\n  generateKeyBoard() {\n    \n    return SYMBOLS.split(' ');\n  }\n\n  displayHallOfFame = hallOfFame => {\n    this.setState({hallOfFame})\n  }\n\n  getFeedbackForKeyBoard(index) {\n    const {usedKeys } = this.state\n    const isUsed = usedKeys.includes(index)\n  \n    if (isUsed) {\n      return 'hidden'\n    }\n    return 'visible'\n  }\n\n  getFeedbackForLetter(index) {\n    const {foundLetters, word } = this.state\n    const isFound = foundLetters.includes(word[index])\n  \n    if (isFound) {\n      return 'visible'\n    }\n    return 'hidden'\n  }\n\n  handleCardClick = index => {\n\n    this.handleNewGuess(index)\n  }\n\n  handleNewGuess(index) {\n    const { word, guesses, usedKeys, foundLetters } = this.state;\n    const newUsedKey = [index];\n    const isIn = (word.includes(SYMBOLS.split(' ')[index]) && !(foundLetters.includes(SYMBOLS.split(' ')[index])));\n    const newGuesses = isIn ? guesses + 1 : guesses;\n    console.log(isIn);\n    this.setState({ usedKeys: [...usedKeys, ...newUsedKey], guesses: newGuesses });\n    if (isIn) {\n      var newLetters = [];\n      for(var i = 0; i < word.length; i++){\n        if (SYMBOLS.split(' ')[index] === word[i]){\n          newLetters.push(word[i]);\n        }\n      }\n      this.setState({ foundLetters: [...foundLetters, ...newLetters] })\n    }\n  }\n\n\n  render() {\n    const {keys, word, guesses, foundLetters, hallOfFame,}=this.state;\n    const won = foundLetters.length === word.length;\n\n    return (\n      \n      <div className=\"Pendu\">\n        {\n          word ? (<HallOfFame entries={hallOfFame}/>) : \n          (<HighScoreInput guesses={guesses} onStored = {this.displayHallOfFame}/>)\n        }\n        <GuessCount guesses={guesses} />\n        <div className=\"wordToGuess\">\n          {word.map((lettre, index) => (\n            <Letter lettre = {lettre}\n            feedback = {this.getFeedbackForLetter(index)}\n            key = {index} />\n          ))}\n        </div>\n        <div className=\"KeyBoard\">\n          {keys.map((touche, index) => (\n            <Key touche = {touche}\n            feedback = {this.getFeedbackForKeyBoard(index)}\n            key = {touche}\n            index = {index}\n            onClick = {this.handleCardClick}\n             />\n          ))}\n        </div>\n        {won && (\n          hallOfFame ? (<HallOfFame entries={hallOfFame}/>) : \n          (<HighScoreInput guesses={guesses} onStored = {this.displayHallOfFame}/>)\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
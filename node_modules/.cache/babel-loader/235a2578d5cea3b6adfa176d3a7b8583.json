{"ast":null,"code":"var _jsxFileName = \"/home/benoit/Documents/ReactJS/pendu_ocr/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Key from './KeyBoard';\nimport Letter from './WordToGuess';\nimport GuessCount from './GuessCount';\nconst SYMBOLS = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z';\nconst Dictionnaire = ['LAPIN', 'PROUT'];\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      keys: this.generateKeyBoard(),\n      word: this.chooseWord(),\n      guesses: 0,\n      usedKeys: [],\n      FoundLetters: []\n    };\n\n    this.handleCardClick = index => {\n      const currentPair = this.state.currentPair;\n\n      if (currentPair.length === 2) {\n        return;\n      }\n\n      if (currentPair.length === 0) {\n        this.setState({\n          currentPair: [index]\n        });\n        return;\n      }\n\n      this.handleNewPairClosedBy(index);\n    };\n  }\n\n  chooseWord() {\n    const result = [];\n    var Word = Dictionnaire[Math.floor(Math.random() * Dictionnaire.length)];\n\n    for (var i = 0; i < Word.length; i++) {\n      result.push(Word.charAt(i));\n    }\n\n    console.log(result);\n    return result;\n  }\n\n  generateKeyBoard() {\n    return SYMBOLS.split(' ');\n  }\n\n  getFeedbackForKeyBoard(index) {\n    const usedKeys = this.state.usedKeys;\n    const isUsed = usedKeys.includes(index);\n\n    if (isUsed) {\n      return 'hidden';\n    }\n\n    return 'visible';\n  }\n\n  getFeedbackForLetter(index) {\n    const FoundLetters = this.state.FoundLetters;\n    const isFound = FoundLetters.includes(index);\n\n    if (isFound) {\n      return 'visible';\n    }\n\n    return 'hidden';\n  }\n\n  handleNewPairClosedBy(index) {\n    const _this$state = this.state,\n          word = _this$state.word,\n          guesses = _this$state.guesses,\n          usedKeys = _this$state.usedKeys,\n          matchedCardIndices = _this$state.matchedCardIndices;\n    const newUsedKey = [index];\n    const isIn = word.includes(SYMBOLS.split(' ')[index]);\n    const newGuesses = guesses + 1;\n    this.setState({\n      usedKeys: [...usedKeys, ...newUsedKey],\n      guesses: newGuesses\n    });\n\n    if (isIn) {\n      this.setState({\n        matchedCardIndices: [...matchedCardIndices, ...newPair]\n      });\n    }\n\n    setTimeout(() => this.setState({\n      currentPair: []\n    }), VISUAL_PAUSE_MSECS);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          keys = _this$state2.keys,\n          word = _this$state2.word,\n          guesses = _this$state2.guesses;\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      className: \"Pendu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(GuessCount, {\n      guesses: guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"wordToGuess\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, word.map((lettre, index) => React.createElement(Letter, {\n      lettre: lettre,\n      feedback: \"hidden\",\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"KeyBoard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, keys.map((touche, index) => React.createElement(Key, {\n      touche: touche,\n      feedback: this.getFeedbackForKeyBoard(index),\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/benoit/Documents/ReactJS/pendu_ocr/src/App.js"],"names":["React","Component","Key","Letter","GuessCount","SYMBOLS","Dictionnaire","App","state","keys","generateKeyBoard","word","chooseWord","guesses","usedKeys","FoundLetters","handleCardClick","index","currentPair","length","setState","handleNewPairClosedBy","result","Word","Math","floor","random","i","push","charAt","console","log","split","getFeedbackForKeyBoard","isUsed","includes","getFeedbackForLetter","isFound","matchedCardIndices","newUsedKey","isIn","newGuesses","newPair","setTimeout","VISUAL_PAUSE_MSECS","render","map","lettre","touche"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nimport Key from './KeyBoard'\nimport Letter from './WordToGuess'\nimport GuessCount from './GuessCount'\n\n\nconst SYMBOLS = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'\n\nconst Dictionnaire = [\n  'LAPIN',\n  'PROUT'\n]\n\nclass App extends Component {\n\n\n  state = {\n    keys: this.generateKeyBoard(),\n    word : this.chooseWord(),\n    guesses: 0,\n    usedKeys: [],\n    FoundLetters: [],\n  }\n\n  chooseWord(){\n    const result = []\n\n    var Word = Dictionnaire[Math.floor(Math.random()*Dictionnaire.length)];\n     \n    for (var i = 0; i < Word.length; i++) {\n      result.push(Word.charAt(i));\n    }\n    console.log(result)\n    return result\n\n  }\n\n  generateKeyBoard() {\n    \n    return SYMBOLS.split(' ');\n  }\n\n  getFeedbackForKeyBoard(index) {\n    const {usedKeys } = this.state\n    const isUsed = usedKeys.includes(index)\n  \n    if (isUsed) {\n      return 'hidden'\n    }\n    return 'visible'\n  }\n\n  getFeedbackForLetter(index) {\n    const {FoundLetters } = this.state\n    const isFound = FoundLetters.includes(index)\n  \n    if (isFound) {\n      return 'visible'\n    }\n    return 'hidden'\n  }\n\n  handleCardClick = index => {\n    const { currentPair } = this.state\n\n    if (currentPair.length === 2) {\n      return\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] })\n      return\n    }\n\n    this.handleNewPairClosedBy(index)\n  }\n\n  handleNewPairClosedBy(index) {\n    const { word, guesses, usedKeys, matchedCardIndices } = this.state\n    const newUsedKey = [index]\n\n    const isIn = word.includes(SYMBOLS.split(' ')[index])\n    const newGuesses = guesses + 1\n\n    this.setState({ usedKeys: [...usedKeys, ...newUsedKey], guesses: newGuesses })\n    if (isIn) {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\n    }\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\n  }\n\n\n  render() {\n    const {keys, word, guesses}=this.state;\n    console.log(this.state);\n    return (\n      \n      <div className=\"Pendu\">\n        <GuessCount guesses={guesses} />\n        <div className=\"wordToGuess\">\n          {word.map((lettre, index) => (\n            <Letter lettre = {lettre}\n            feedback = 'hidden'\n            key = {index} />\n          ))}\n        </div>\n        <div className=\"KeyBoard\">\n          {keys.map((touche, index) => (\n            <Key touche = {touche}\n            feedback = {this.getFeedbackForKeyBoard(index)}\n            key = {index} />\n          ))}\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
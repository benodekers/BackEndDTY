{"ast":null,"code":"var _jsxFileName = \"/home/benoit/Documents/ReactJS/pendu_ocr/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Key from './KeyBoard';\nimport Letter from './WordToGuess';\nimport GuessCount from './GuessCount';\nconst SYMBOLS = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z';\nconst Dictionnaire = ['LAPIN', 'PROUT'];\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      keys: this.generateKeyBoard(),\n      word: this.chooseWord(),\n      guesses: 0,\n      usedKeys: []\n    };\n  }\n\n  chooseWord() {\n    const result = [];\n    var Word = Dictionnaire[Math.floor(Math.random() * Dictionnaire.length)];\n\n    for (var i = 0; i < Word.length; i++) {\n      result.push(Word.charAt(i));\n    }\n\n    console.log(result);\n    return result;\n  }\n\n  generateKeyBoard() {\n    return SYMBOLS.split(' ');\n  }\n\n  getFeedbackForKeyBoard(index) {\n    const _this$state = this.state,\n          word = _this$state.word,\n          usedKeys = _this$state.usedKeys;\n    const indexMatched = matchedCardIndices.includes(index);\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched';\n    }\n\n    return indexMatched ? 'visible' : 'hidden';\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          keys = _this$state2.keys,\n          word = _this$state2.word,\n          guesses = _this$state2.guesses;\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      className: \"Pendu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(GuessCount, {\n      guesses: guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"wordToGuess\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, word.map((lettre, index) => React.createElement(Letter, {\n      lettre: lettre,\n      feedback: \"hidden\",\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"KeyBoard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, keys.map((touche, index) => React.createElement(Key, {\n      touche: touche,\n      feedback: \"visible\",\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/benoit/Documents/ReactJS/pendu_ocr/src/App.js"],"names":["React","Component","Key","Letter","GuessCount","SYMBOLS","Dictionnaire","App","state","keys","generateKeyBoard","word","chooseWord","guesses","usedKeys","result","Word","Math","floor","random","length","i","push","charAt","console","log","split","getFeedbackForKeyBoard","index","indexMatched","matchedCardIndices","includes","currentPair","render","map","lettre","touche"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nimport Key from './KeyBoard'\nimport Letter from './WordToGuess'\nimport GuessCount from './GuessCount'\n\n\nconst SYMBOLS = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'\n\nconst Dictionnaire = [\n  'LAPIN',\n  'PROUT'\n]\n\nclass App extends Component {\n\n\n  state = {\n    keys: this.generateKeyBoard(),\n    word : this.chooseWord(),\n    guesses: 0,\n    usedKeys: [],\n  }\n\n  chooseWord(){\n    const result = []\n\n    var Word = Dictionnaire[Math.floor(Math.random()*Dictionnaire.length)];\n     \n    for (var i = 0; i < Word.length; i++) {\n      result.push(Word.charAt(i));\n    }\n    console.log(result)\n    return result\n\n  }\n\n  generateKeyBoard() {\n    \n    return SYMBOLS.split(' ');\n  }\n\n  getFeedbackForKeyBoard(index) {\n    const {word, usedKeys } = this.state\n    const indexMatched = matchedCardIndices.includes(index)\n  \n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n  \n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n  \n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n\n  render() {\n    const {keys, word, guesses}=this.state;\n    console.log(this.state);\n    return (\n      \n      <div className=\"Pendu\">\n        <GuessCount guesses={guesses} />\n        <div className=\"wordToGuess\">\n          {word.map((lettre, index) => (\n            <Letter lettre = {lettre}\n            feedback = 'hidden'\n            key = {index} />\n          ))}\n        </div>\n        <div className=\"KeyBoard\">\n          {keys.map((touche, index) => (\n            <Key touche = {touche}\n            feedback = 'visible'\n            key = {index} />\n          ))}\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
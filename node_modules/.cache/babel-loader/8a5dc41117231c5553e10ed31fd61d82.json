{"ast":null,"code":"var _jsxFileName = \"/home/benoit/Documents/ReactJS/pendu_ocr/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Key from './KeyBoard';\nimport Letter from './WordToGuess';\nimport GuessCount from './GuessCount';\nimport HallOfFame from './HallOfFame';\nimport AskWord from './AskWord';\nimport HighScoreInput from './HighScoreInput';\nconst SYMBOLS = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z';\nconst Dictionnaire = ['LIPINddddddddddddd', 'PROOOddddddddd'];\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      keys: this.generateKeyBoard(),\n      word: [],\n      guesses: 0,\n      usedKeys: [],\n      foundLetters: [],\n      hallOfFame: null,\n      temporaryWord: ''\n    };\n\n    this.displayHallOfFame = hallOfFame => {\n      this.setState({\n        hallOfFame\n      });\n    };\n\n    this.StoreWord = Word => {\n      this.setState({\n        word: Word\n      });\n    };\n\n    this.handleCardClick = index => {\n      const usedKeys = this.state.usedKeys;\n\n      if (!usedKeys.includes(index)) {\n        this.handleNewGuess(index);\n      }\n    };\n  }\n\n  chooseWord() {\n    const result = [];\n    var Word = Dictionnaire[Math.floor(Math.random() * Dictionnaire.length)];\n\n    for (var i = 0; i < Word.length; i++) {\n      result.push(Word.charAt(i));\n    }\n\n    return result;\n  }\n\n  generateKeyBoard() {\n    return SYMBOLS.split(' ');\n  }\n\n  getFeedbackForKeyBoard(index, wordExist) {\n    const usedKeys = this.state.usedKeys;\n    const isUsed = usedKeys.includes(index);\n\n    if (isUsed || !wordExist) {\n      return 'hidden';\n    }\n\n    return 'visible';\n  }\n\n  getFeedbackForLetter(index) {\n    const _this$state = this.state,\n          foundLetters = _this$state.foundLetters,\n          word = _this$state.word;\n    const isFound = foundLetters.includes(word[index]);\n\n    if (isFound) {\n      return 'visible';\n    }\n\n    return 'hidden';\n  }\n\n  handleNewGuess(index) {\n    const _this$state2 = this.state,\n          word = _this$state2.word,\n          guesses = _this$state2.guesses,\n          usedKeys = _this$state2.usedKeys,\n          foundLetters = _this$state2.foundLetters;\n    const newUsedKey = [index];\n    const isIn = word.includes(SYMBOLS.split(' ')[index]) && !foundLetters.includes(SYMBOLS.split(' ')[index]);\n    const newGuesses = isIn ? guesses + 1 : guesses;\n    this.setState({\n      usedKeys: [...usedKeys, ...newUsedKey],\n      guesses: newGuesses\n    });\n\n    if (isIn) {\n      var newLetters = [];\n\n      for (var i = 0; i < word.length; i++) {\n        if (SYMBOLS.split(' ')[index] === word[i]) {\n          newLetters.push(word[i]);\n        }\n      }\n\n      this.setState({\n        foundLetters: [...foundLetters, ...newLetters]\n      });\n    }\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          keys = _this$state3.keys,\n          word = _this$state3.word,\n          guesses = _this$state3.guesses,\n          foundLetters = _this$state3.foundLetters,\n          hallOfFame = _this$state3.hallOfFame;\n    const won = foundLetters.length === word.length && foundLetters.length !== 0;\n    const wordExist = word.length !== 0;\n    return React.createElement(\"div\", {\n      className: \"Pendu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, !wordExist && React.createElement(AskWord, {\n      StoreWord: this.StoreWord,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(GuessCount, {\n      guesses: guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"wordToGuess\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, word.map((lettre, index) => React.createElement(Letter, {\n      lettre: lettre,\n      feedback: this.getFeedbackForLetter(index),\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"images\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: require('./ImagePendu/Image8.jpg'),\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"KeyBoard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, keys.map((touche, index) => React.createElement(Key, {\n      touche: touche,\n      feedback: this.getFeedbackForKeyBoard(index, wordExist),\n      key: touche,\n      index: index,\n      onClick: this.handleCardClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }))), won && (hallOfFame ? React.createElement(HallOfFame, {\n      entries: hallOfFame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }) : React.createElement(HighScoreInput, {\n      guesses: guesses,\n      onStored: this.displayHallOfFame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/benoit/Documents/ReactJS/pendu_ocr/src/App.js"],"names":["React","Component","Key","Letter","GuessCount","HallOfFame","AskWord","HighScoreInput","SYMBOLS","Dictionnaire","App","state","keys","generateKeyBoard","word","guesses","usedKeys","foundLetters","hallOfFame","temporaryWord","displayHallOfFame","setState","StoreWord","Word","handleCardClick","index","includes","handleNewGuess","chooseWord","result","Math","floor","random","length","i","push","charAt","split","getFeedbackForKeyBoard","wordExist","isUsed","getFeedbackForLetter","isFound","newUsedKey","isIn","newGuesses","newLetters","render","won","map","lettre","require","touche"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nimport Key from './KeyBoard'\nimport Letter from './WordToGuess'\nimport GuessCount from './GuessCount'\nimport HallOfFame from './HallOfFame'\nimport AskWord from './AskWord'\nimport HighScoreInput from './HighScoreInput'\n\n\n\n\nconst SYMBOLS = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'\n\nconst Dictionnaire = [\n  'LIPINddddddddddddd',\n  'PROOOddddddddd'\n]\n\nclass App extends Component {\n\n\n  state = {\n    keys: this.generateKeyBoard(),\n    word : [],\n    guesses: 0,\n    usedKeys: [],\n    foundLetters: [],\n    hallOfFame: null,\n    temporaryWord:'',\n  }\n\n\n  chooseWord(){\n    const result = []\n\n    var Word = Dictionnaire[Math.floor(Math.random()*Dictionnaire.length)];\n     \n    for (var i = 0; i < Word.length; i++) {\n      result.push(Word.charAt(i));\n    }\n    return result\n\n  }\n\n  generateKeyBoard() {\n    \n    return SYMBOLS.split(' ');\n  }\n\n  displayHallOfFame = hallOfFame => {\n    this.setState({hallOfFame})\n  }\n\n  StoreWord = Word => {\n    this.setState({word: Word})\n  }\n\n  getFeedbackForKeyBoard(index, wordExist) {\n    const {usedKeys } = this.state\n    const isUsed = usedKeys.includes(index)\n  \n    if (isUsed || !wordExist) {\n      return 'hidden'\n    }\n    return 'visible'\n  }\n\n  getFeedbackForLetter(index) {\n    const {foundLetters, word } = this.state\n    const isFound = foundLetters.includes(word[index])\n  \n    if (isFound) {\n      return 'visible'\n    }\n    return 'hidden'\n  }\n\n  handleCardClick = index => {\n    const {usedKeys}=this.state;\n    if (!usedKeys.includes(index)){\n      this.handleNewGuess(index);\n      }\n  }\n\n  handleNewGuess(index) {\n    const { word, guesses, usedKeys, foundLetters } = this.state;\n    const newUsedKey = [index];\n    const isIn = (word.includes(SYMBOLS.split(' ')[index]) && !(foundLetters.includes(SYMBOLS.split(' ')[index])));\n    const newGuesses = isIn ? guesses + 1 : guesses;\n    this.setState({ usedKeys: [...usedKeys, ...newUsedKey], guesses: newGuesses });\n    if (isIn) {\n      var newLetters = [];\n      for(var i = 0; i < word.length; i++){\n        if (SYMBOLS.split(' ')[index] === word[i]){\n          newLetters.push(word[i]);\n        }\n      }\n      this.setState({ foundLetters: [...foundLetters, ...newLetters] })\n    }\n  }\n\n\n  render() {\n    const {keys, word, guesses, foundLetters, hallOfFame,}=this.state;\n    const won = ((foundLetters.length === word.length)&&(foundLetters.length!==0));\n    const wordExist = (word.length !== 0)\n    return (\n      \n      <div className=\"Pendu\">\n        {!wordExist &&(\n        <AskWord StoreWord = {this.StoreWord}/>\n        )}\n\n        <GuessCount guesses={guesses} />\n        \n        <div className=\"wordToGuess\">\n          {word.map((lettre, index) => (\n            <Letter lettre = {lettre}\n            feedback = {this.getFeedbackForLetter(index)}\n            key = {index} />\n          ))}\n        </div>\n\n        <div className=\"images\">\n          <img src={ require('./ImagePendu/Image8.jpg')} alt=\"\"  />\n        </div>\n        \n        <div className=\"KeyBoard\">\n          {keys.map((touche, index) => (\n            <Key touche = {touche}\n            feedback = {this.getFeedbackForKeyBoard(index, wordExist)}\n            key = {touche}\n            index = {index}\n            onClick = {this.handleCardClick}\n             />\n          ))}\n        </div>\n        {won && (\n          hallOfFame ? (<HallOfFame entries={hallOfFame}/>) : \n          (<HighScoreInput guesses={guesses} onStored = {this.displayHallOfFame}/>)\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}